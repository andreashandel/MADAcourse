{
  "hash": "81f70491016b44d66b0a4723ed84c8e0",
  "result": {
    "markdown": "---\ntitle: Tidyverse and Friends \nsubtitle: \"\"\n---\n\n\n# Overview\n\nOne of the strengths of R (and also a source of confusion) is that it is\nvery flexible and almost always lets you do things in more than one way.\nR itself comes with some functionality. This is often referred to as\n`base R`. Even with just this basic functionality, there are often many\nways to accomplish a task. But the real power of R comes from its many\npackages. Packages (also called libraries in some other programming\nlanguages) contain additional functions and functionality that lets you\nfairly easily do things that would require a ton of coding effort if you\ntried to do it yourself. Someone basically wrote the functionality for\nyou, and you can use it.\n\nWhile there are tons of packages available, some are very commonly used.\nFor data analysis tasks, the folks from R Studio have developed many\npackages that are very useful. One such set of packages, the most widely\nused set, is called the [`tidyverse`](https://www.tidyverse.org/). By\nusing those packages, a lot of coding applied to data analysis becomes\neasier, more readable, and more powerful. We will use the `tidyverse`\npackages and their functionality a lot. That said, knowing some base R\nis very useful. In general, you can fairly easily mix and match.\n\n# Learning Objectives\n\n-   Know what the `tidyverse` is\n-   Be able to apply `tidyverse` code to data wrangling problems\n-   Be able to use R packages for specific needs\n\n# Tidy data\n\nThe concept of the tidyverse can be traced back to the concept of *tidy\ndata*, which [Hadley Wickham](http://hadley.nz/) introduced in his\n[*Tidy Data* paper](https://www.jstatsoft.org/article/view/v059i10/).\nGive the article a quick read to get the overall idea. You will see it a\nlot, so it's good to be familiar with it.\n\n# Tidyverse philosophy\n\nThe R packages developed by Hadley and others were eventually grouped\ntogether and now goes by the name \"`tidyverse`\". If you want to learn\nmore about the principles of those packages, you can read this [short\nmanifesto](https://tidyverse.tidyverse.org/articles/manifesto.html)\nwritten by Hadley. Some of what he writes might not be fully\nunderstandable to you (e.g., functional programming or pipes), but\nyou'll get the overall idea. For our purpose, the important aspects to\nremember is that the tidyverse is a collection of R packages that are\nall structured similarly (from a user perspective), play nice with each\nother, and help you in your various analysis tasks as you go from messy\ndata to data that is tidied up and ready for formal analysis.\n\nNote that there are many more R packages that are not part of the core\n`tidyverse`, but that still follow the same principles and nicely work\nwith other `tidyverse` packages.\n\n# Learning the Tidyverse\n\nTo learn more and practice some of the tidyverse functionality, I\nsuggest you go through the *Work with Data* and *Tidy your Data*\nsections of the [Posit Recipes](https://posit.cloud/learn/recipes). More\nor less the same content, presented a bit differently and\nnon-interactively, can be found in the [Tidy Data chapter in\n*R4DS*](https://r4ds.hadley.nz/data-tidy.html). This might be a good\nreference to look up things. If you want to practice and learn more,\nread the Tidyverse, Introduction to Data Wrangling, Reshaping Data and\nJoining Tables chapters of [*IDS*](https://rafalab.github.io/dsbook/).\nIf you want some more data tidying practice, check out [Garrett\nGrolemund's tutorial](http://garrettgman.github.io/tidying/) or [Joachim\nGoedhart's short blog\npost](https://thenode.biologists.com/converting-excellent-spreadsheets-tidy-data/education/).\n\nThese are a lot of resources, and I don't expect you to work through all\nof them in detail. I do suggest you take a quick look at all of them,\nand then work through some of them based on your knowledge level. As we\nprogress through the course and you are asked to do a lot of these\ntasks, you will likely want to re-visit these materials. And as always,\nGoogle is your friend.\n\n::: note\nAs you'll find out shortly, one feature of R code written in the\n`tidyverse` style is the heavy use of the `magrittr` [pipe\noperator](https://magrittr.tidyverse.org/) (the `%>%` symbol). For\ninstance, this is the kind of code that you might see when doing data\nwrangling (note that this code doesn't work since it only shows the\nchain of functions, for it to work there would need to be arguments\nprovided to each function, i.e. there needs to be something inside the\n`()`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata %>% filter() %>% \n         select() %>%\n         fct_lump() %>%\n         mutate() %>% ...\n```\n:::\n\n\nThe idea is that you pipe the results from one operation into the next,\nand thus potentially build a long chain of commands. That style of\ncoding makes it often quite easy to understand what the code is doing.\nFor instance in the example code above, you first filter the data based\non some row values, then select some columns, then combine some factor\nvariable, then mutate a variable into a new one, and so on.\n\nThe problem, especially when you start out, is that things can (and\nwill) go wrong at some of those steps, and it's difficulty to figure out\nwhere the problem is. At least when starting out, it is in my opinion\noften better to save the result of some cleaning operation as a new\nintermediate variable. That lets you more easily check for bugs, and to\nsee how the data changed from step to step and if it does what you think\nit should. So instead of using a long chain of pipes, you can write the\ncode like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_small1 <- data %>% filter()\ndat_small2 <- dat_small1 %>% select()\ndat_small3 <- dat_small2 %>% fct_lump()\n...\n```\n:::\n\n\nThis code is not quite as easy to read, and it creates all these\nadditional variables that you might not want or need. But I think at\nleast as you are learning the different `tidyverse` functions, it often\nhelps to be able to inspect what happens at each step, and thus more\neasily spot when things go wrong. Once you get more comfortable with\ncleaning steps and coding in general, and make few mistakes, you can\nstart chaining things together. But if you start out writing code that\nway, it's much harder to follow along and find bugs.\n\nThere is also a nice project called [Tidy Data\nTutor](https://tidydatatutor.com/) that allows you to visualize the\ndifferent steps in a data analysis chain of commands. Once you get used\nto chaining commands together in a long pipeline, or try to inspect\nsomeone else's code, using that tool to look at each step can be quite\nuseful. Give it a try.\n:::\n\n# Beyond the Tidyverse\n\nThere are lots of other useful R packages that make your coding life\neasier. We'll make liberal use of them throughout this course. Later in\nthe course, we'll explore another set of packages called\n[`tidymodels`](https://www.tidymodels.org/). It is highly likely that\nfor some of the course exercises or the course project, you will be\nusing other packages that you find helpful. You are allowed and\nencourage to use whatever packages you find useful. Being able to find\npackages that do what you need is important.\n\n# Note about R packages (repeat)\n\nAs mentioned in one of the introductory pages, the quality of packages\nvaries. In general, if they are on `CRAN` or `bioconductor`, they passed\nsome quality checks. That does however not mean that the functions do\nthe right thing, just that they run. Other packages might be more\nexperimental, and while they might work well, there might also be bugs.\nIn general, packages that are used by many people, packages that involve\npeople who work at R-centric companies (e.g., Posit), and packages that\nhave many developers/contributors and are actively maintained are good\nsigns that it's a stable and reliable package. That said, there are many\npackages that are developed by a single person and are only available\nfrom `GitHub`, and they are still very good packages. Ideally, for a new\npackage, test it and see if it does things stably and correctly. If yes,\nyou can start using it. Just always carefully inspect the results you\nget to make sure things are reliable. If at some point, you work with R\nin a non-academic setting and you might use R packages for jobs that\nneed to run reliably for many years to come, choosing packages might be\na bit more tricky and require more thought. For an academic/research\nsetting, it's usually ok to use almost any package, as long as it seems\nreliable and works.\n",
    "supporting": [
      "rcoding-tidyverse_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}