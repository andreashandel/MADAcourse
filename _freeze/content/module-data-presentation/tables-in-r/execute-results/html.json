{
  "hash": "2ae9e159f79a648151eb7dce0e8080ff",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Tables in R\nsubtitle: \"\"\nauthors: \n  - Zane Billings\n  - Andreas Handel\n---\n\n\n\n\n\n# Overview\n\nIn this unit, we will discuss how to make publication-ready tables of data\nin `R`, and when making tables is appropriate (compared to visualizations).\n\n![Some data are best in tables...but that means we have to learn how to make footnotes too.](../../media/xkcd-every-data-table.png){width=\"80%\" fig-alt=\"A comic from the website XKCD. It shows a list of years with scribbles beside each year to represent some kind of data. The years 2020 and 2021 both have symbols indicating they are associated with footnotes containign extra explanations. The caption reads 'every data table from now on.'\"}\n\n# Learning Objectives\n\n* Understand when and how to use tables.\n* Become familiar with basic principles of table design.\n* Learn how to implement high-quality tables in R.\n\n# Introduction\n\nOn average, tables are much more straightforward than visualizations. (Of\ncourse there are exceptions.) A table is a way of presenting data in a grid\nof rows and columns. Of course, like figures, tables have titles and captions\nin scientific literature, and many have footnotes (like the comic above alludes\nto) which explain some detail of the table.\n\nWhile we almost always prefer making visualizations, sometimes data naturally\nlend themselves to a tabular format. We'll discuss the potential pitfalls of tables later in this unit. Cole Nussbaumer, the author of a somewhat\nwell-known book called *Storytelling with Data*, has written about when to\nuse tables on the [SWD blog](https://web.archive.org/web/20240118192959/https://www.storytellingwithdata.com/blog/2011/11/visual-battle-table-vs-graph). In general, you should prefer tables in the following circumstances.\n\n* You want to present an exhaustive list of data, rather than convey a general trend.\n* You need to show precise, quantitative information. (For example, the\nvalues and uncertainty of fitted model coefficients.)\n* You want viewers to look up or compare individual values, rather than\ncomparing series of data.\n* You need to include basic information which would take more space to display\nas a figure, without providing any new information. Examples include \"Table 1\"\nin epidemiology papers, containing demographic statistics; univariate summary\nstatistics; and some contingency tables.\n\nWhatever the case is, you will need to make tables with your\ndata at some point in your life.\n\n# Making tables in `R`\n\nWhile the `R` ecosystem for making tables is less mature than the data\nvisualization ecosystem, there are many packages for making both simple\nand publication-ready reproducible tables. In addition to being reproducible,\nmaking your tables with R and using them in Quarto solves one extremely\nfrustrating problem: if your table is reproducible with code, whenever you\nupdate your data or analysis, you can rerun the code to get a new table, instead\nof recalculating all the cells by hand and typing them into a word document\nagain!\n\nIf you want to see some nice R-produced tables, you can check out the\n[Posit community table gallery](https://community.rstudio.com/c/table-gallery/64)\nor the [R graph gallery table section](https://r-graph-gallery.com/table.html).\n\nSince you already learned about the `plot()` function, you might think the\n`table()` function can help you get started in base R. However, the `table()`\nfunction has very limited uses, and basically only works for simple\ncontingency tables. Of course, if all you need is a simple contigency table,\nthe `table()` function works quite well, although the result will not look\nvery nice in your Quarto output.\n\n## Simple markdown tables\n\nVisualizations are somewhat easy for Quarto to use, because they are always\nsome type of image file (PNG, JPEG, etc.). However, tables are not so easy --\nbecause they consist of just text and grid lines (usually), they need to be\nconverted into a specific format for Quarto to use, and the best format to\nuse depends on what output you need Quarto to produce. Remember that Quarto\nruns on Markdown, so the simplest option is to use a [Markdown table](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables).\n\nAlthough you can make those by hand, you shouldn't! There are a few functions that\ncan make simple Markdown tables for you, including [`knitr::kable()`](https://bookdown.org/yihui/rmarkdown-cookbook/kable.html),\nand [`pander::pandoc.table()`](https://cran.r-project.org/web/packages/pander/vignettes/pandoc_table.html). Both of these are decently customizable and work\nwell for a lot of cases. Because they generate Markdown text from code, they\nshould work with Quarto regardless of the output format you use.\n\n## Tables with complex formats\n\nHTML is the most flexible format for generating tables. Any table you can\nsee on the internet is made with HTML (and sometimes CSS and JavaScript). R has\nmany packages for generating HTML tables, including the easy-to-use\n[`kableExtra`](https://cran.r-project.org/web/packages/kableExtra/index.html). The `kableExtra` package\nis basically an extension of `kable` to have a lot of `Extra` features for\nmaking nicer tables. HTML has the special power to generate **interactive\ntables** using packages like [`DT`] and [`Reactable`].\n\nIf you are using a PDF format (common in math, physics, theoretical statistics\nand other math-heavy fields), you can write LaTeX code directly in Quarto,\nwhich means you can write tables using any of the LaTeX packages you want.\nThe `kableExtra` package is also compatible with LaTeX.\n\nWord is the most complicated format, and in Epidemiology the most common. Many\ntable packages do not work with Word, or have limited functionality. In my\nexperience, the best package for word output is [`flextable`](https://ardata-fr.github.io/flextable-book/),\nwhich was designed by the creator of the [`officer`](https://cran.r-project.org/web/packages/officer/index.html) package specifically to work with Word outputs. Any table making package that outputs\nraw Markdown should be compatible with Word output. Quarto specifically will\n**attempt to convert any HTML tables into the correct output format**. What this\nmeans in real life is that many HTML tables will work in Word output, but if\nthey are too complicated they may not look how you expect, or may not work. As\nan alternative, I also know several researchers who like [`huxtable`](https://hughjonesd.github.io/huxtable/), although I personally prefer\n`flextable`.\n\nThe package [`tables`](https://dmurdoch.github.io/tables/) deserves an honorable\nmention as (one of) the oldest table-making package on CRAN. If you want to\ngenerate an HTML, LaTeX, or plain text table, or use a table for further\ncalculations in `R`, `tables` can probably do it. However, this package is\nvery old and in my opinion is quite difficult to learn and quite clunky to\nuse -- the interface is (unsurprinsingly) quite old-fashioned and different\nfrom tidyverse-style code. A relatively new addition to the tablemaking scene\nis [`tinytable`](https://vincentarelbundock.github.io/tinytable/). The `tinytable` package provides a modern interface for `tables` and\nnotably has very few dependencies, which can be helpful for reproducibility.\n\n## \"Modern\" table packages\n\nFor better or worse, the table package ecosystem in `R` has largely coalesced around three major families of packages. Each of these packages has\npros and cons, and can generally make whatever table you need to make, and\nthey are all very good packages.\n\nThe first of these sets of packages is the previously-mentioned [`knitr::kable()`](https://bookdown.org/yihui/rmarkdown-cookbook/kable.html) and\n[`kableExtra`](https://cran.r-project.org/web/packages/kableExtra/index.html). These packages are relatively easy to use, but are not\nquite as flexible as the other two options. They will suffice for most tables\nif you like using them.\n\nThe second of these is the also-previously-mentioned [flextable](https://ardata-fr.github.io/flextable-book/). The `flextable`\npackage is notable for its consistency across many formats -- for several years,\n`flextable` was the only table package that could guarantee your table would\nlook the same in HTML, PDF, and Word. While Flextable certainly has a learning\ncurve, the detailed manual with several examples written by the author\nis fairly approachable. It's a package worth checking out.\n\nThe final family is the `gt` family of packages. The `gt` family, which stands\nfor \"grammar of tables\" is developed by Posit, and intended to be the table\nversion of `ggplot2`. This family revolves around the [`gt`](https://gt.rstudio.com/) package. The syntax for making tables in this\npackage is designed to be similar to tidyverse-style syntax, and is therefore\nprobably the easiest to learn as part of this course. There are also many,\nmany examples and tutorials showing how to use `gt` to make gorgeous\ntables. In the old days, `gt` was not a viable option for us because it\ndidn't work with Word, but that has been remedied and now `gt` is the official\ntable package supported by Posit, which means there are a lot of resources\nshowing how to use `gt`. The `gt` package can do almost everything, but if you\nneed it, the [`gtExtras`](https://jthomasmock.github.io/gtExtras/) package\nprovides even more options. There is currently no \"`gt` extension gallery\"\nlike there is for `ggplot2`, but in time I think there will be.\n\nIn short, while all of these packages are great, I **highly recommend that\nnew users start practicing with the `gt` package**, since this package will\nhave the most learning resources and the most consistent development support\nfor the foreseeable future.\n\n# Easy summary tables\n\nAll of the table packages we've talked about so far are designed to turn a\ndata frame into a table. Like this.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |>\n  head() |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n| Sepal.Length| Sepal.Width| Petal.Length| Petal.Width|Species |\n|------------:|-----------:|------------:|-----------:|:-------|\n|          5.1|         3.5|          1.4|         0.2|setosa  |\n|          4.9|         3.0|          1.4|         0.2|setosa  |\n|          4.7|         3.2|          1.3|         0.2|setosa  |\n|          4.6|         3.1|          1.5|         0.2|setosa  |\n|          5.0|         3.6|          1.4|         0.2|setosa  |\n|          5.4|         3.9|          1.7|         0.4|setosa  |\n\n\n:::\n:::\n\n\n\n\nHowever, most of the time we don't put tables of raw data in our papers. While\nthis was common in the early days of statistics, these days we just have too\nmuch data. So we often want to show summary statistics. Now, we can\ncalculate those ourselves.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |>\n  dplyr::group_by(Species) |>\n  dplyr::summarise(dplyr::across(Sepal.Length:Petal.Width, mean)) |>\n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|Species    | Sepal.Length| Sepal.Width| Petal.Length| Petal.Width|\n|:----------|------------:|-----------:|------------:|-----------:|\n|setosa     |        5.006|       3.428|        1.462|       0.246|\n|versicolor |        5.936|       2.770|        4.260|       1.326|\n|virginica  |        6.588|       2.974|        5.552|       2.026|\n\n\n:::\n:::\n\n\n\n\nBut this can be time consuming, especially when we want to make more complex\ntables. Fortunately, there are a number of `R` packages that excel at making\nthese kinds of summary statistic tables for us, like this.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |>\n  gtsummary::tbl_summary(by = Species)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"kqoioajpxw\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#kqoioajpxw table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#kqoioajpxw thead, #kqoioajpxw tbody, #kqoioajpxw tfoot, #kqoioajpxw tr, #kqoioajpxw td, #kqoioajpxw th {\n  border-style: none;\n}\n\n#kqoioajpxw p {\n  margin: 0;\n  padding: 0;\n}\n\n#kqoioajpxw .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#kqoioajpxw .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#kqoioajpxw .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#kqoioajpxw .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#kqoioajpxw .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#kqoioajpxw .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#kqoioajpxw .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#kqoioajpxw .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#kqoioajpxw .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#kqoioajpxw .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#kqoioajpxw .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#kqoioajpxw .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#kqoioajpxw .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#kqoioajpxw .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#kqoioajpxw .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kqoioajpxw .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#kqoioajpxw .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#kqoioajpxw .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#kqoioajpxw .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kqoioajpxw .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#kqoioajpxw .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kqoioajpxw .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#kqoioajpxw .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kqoioajpxw .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kqoioajpxw .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kqoioajpxw .gt_left {\n  text-align: left;\n}\n\n#kqoioajpxw .gt_center {\n  text-align: center;\n}\n\n#kqoioajpxw .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#kqoioajpxw .gt_font_normal {\n  font-weight: normal;\n}\n\n#kqoioajpxw .gt_font_bold {\n  font-weight: bold;\n}\n\n#kqoioajpxw .gt_font_italic {\n  font-style: italic;\n}\n\n#kqoioajpxw .gt_super {\n  font-size: 65%;\n}\n\n#kqoioajpxw .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#kqoioajpxw .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#kqoioajpxw .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#kqoioajpxw .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#kqoioajpxw .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#kqoioajpxw .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#kqoioajpxw .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;Characteristic&lt;/strong&gt;\"><strong>Characteristic</strong></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;setosa&lt;/strong&gt;, N = 50&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>setosa</strong>, N = 50<span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;versicolor&lt;/strong&gt;, N = 50&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>versicolor</strong>, N = 50<span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span></th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"&lt;strong&gt;virginica&lt;/strong&gt;, N = 50&lt;span class=&quot;gt_footnote_marks&quot; style=&quot;white-space:nowrap;font-style:italic;font-weight:normal;&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/span&gt;\"><strong>virginica</strong>, N = 50<span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span></th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Sepal.Length</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">5.00 (4.80, 5.20)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">5.90 (5.60, 6.30)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">6.50 (6.23, 6.90)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Sepal.Width</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">3.40 (3.20, 3.68)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">2.80 (2.53, 3.00)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">3.00 (2.80, 3.18)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Petal.Length</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">1.50 (1.40, 1.58)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">4.35 (4.00, 4.60)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">5.55 (5.10, 5.88)</td></tr>\n    <tr><td headers=\"label\" class=\"gt_row gt_left\">Petal.Width</td>\n<td headers=\"stat_1\" class=\"gt_row gt_center\">0.20 (0.20, 0.30)</td>\n<td headers=\"stat_2\" class=\"gt_row gt_center\">1.30 (1.20, 1.50)</td>\n<td headers=\"stat_3\" class=\"gt_row gt_center\">2.00 (1.80, 2.30)</td></tr>\n  </tbody>\n  \n  <tfoot class=\"gt_footnotes\">\n    <tr>\n      <td class=\"gt_footnote\" colspan=\"4\"><span class=\"gt_footnote_marks\" style=\"white-space:nowrap;font-style:italic;font-weight:normal;\"><sup>1</sup></span> Median (IQR)</td>\n    </tr>\n  </tfoot>\n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\nSee how easy that was? It's also extremely customization.\n\nThere are a few very simple packages that make basic summary tables. These\ninclude packages like [`janitor`](https://cran.r-project.org/web/packages/janitor/index.html), [`rstatix`](https://cran.r-project.org/web/packages/rstatix/index.html), [`furniture`](https://cran.r-project.org/web/packages/furniture/index.html), and [`arsenal`](https://cran.r-project.org/web/packages/arsenal/index.html). All of these are fairly easy to use and somewhat limited in their functionality.\n\nThe best package for making summary tables, in my opinion, is [`gtsummary`](https://www.danieldsjoberg.com/gtsummary/), which is part of the `gt`\npackage family, but can export summary tables to multiple table packages, including `flextable` and `gt`. The `gtsummary` package can make \"Table 1\"\nstyle descriptive tables, cross-tables, stratified tables, tables of regression\nmodels, and univariate regression tables which automatically calculate unadjusted\nresults (thus making it easy to create a standard \"Table 2\" for epidemiology as well, although this is not a statistical practice that we necessarily condone).\n\nAnother fantastic package is [`modelsummary`](https://modelsummary.com/). The\n`modelsummary` package provides easy-to-use functionality for making customizable summary tables (Table 1's), and interfaces with many common packages for making\nstatistical models in `R` to make presenting your model results effortless.\n\nThere are many other packages which do this job, but I think that `gtsummary` and `modelsummary` provide a comprehensive set of functions, and are both easy to use and customizable. I would recommend these two packages in 99% of cases.\n\n# Pitfalls of tables\n\nPlots can reveal many things to us that tables simply cannot. As [Richard McElreath](https://xcelab.net/rm/), the author of the fantastic (but unfortunately non-free) textbook [*Statistical Rethinking*](https://xcelab.net/rm/statistical-rethinking/), says (paraphrased) \"Staring at a table is like staring into the void. You can\nstare into the void, and the void will stare back.\" Deriving practical\ninsight from tables is often extremely difficult. Consider the following example\nfor why we always want to visualize data when possible.\n\nSuppose we have the following four sets of $(x, y)$ values.\n\n|   I  |       |  II  |      |  III |       |  IV  |       |\n|:----:|:-----:|:----:|:----:|:----:|:-----:|:----:|:-----:|\n|  x_1 |  y_1  |  x_2 | y_2  | x_3  | y_3   | x_4  | y_4   |\n| 10.0 |  8.04 | 10.0 | 9.14 | 10.0 |  7.46 |  8.0 |  6.58 |\n|  8.0 |  6.95 |  8.0 | 8.14 |  8.0 |  6.77 |  8.0 |  5.76 |\n| 13.0 |  7.58 | 13.0 | 8.74 | 13.0 | 12.74 |  8.0 |  7.71 |\n|  9.0 |  8.81 |  9.0 | 8.77 |  9.0 |  7.11 |  8.0 |  8.84 |\n| 11.0 |  8.33 | 11.0 | 9.26 | 11.0 |  7.81 |  8.0 |  8.47 |\n| 14.0 |  9.96 | 14.0 | 8.10 | 14.0 |  8.84 |  8.0 |  7.04 |\n|  6.0 |  7.24 |  6.0 | 6.13 |  6.0 |  6.08 |  8.0 |  5.25 |\n|  4.0 |  4.26 |  4.0 | 3.10 |  4.0 |  5.39 | 19.0 | 12.50 |\n| 12.0 | 10.84 | 12.0 | 9.13 | 12.0 |  8.15 |  8.0 |  5.56 |\n|  7.0 |  4.82 |  7.0 | 7.26 |  7.0 |  6.42 |  8.0 |  7.91 |\n|  5.0 |  5.68 |  5.0 | 4.74 |  5.0 |  5.73 |  8.0 |  6.89 |\n\nWe can make some summary statistics.\n\n|           Statistic         |         I         |         II        | III               | IV                |\n|:---------------------------:|:-----------------:|:-----------------:|-------------------|-------------------|\n| Mean of x                   | 9                 | 9                 | 9                 | 9                 |\n| Sample variance of x        | 11                | 11                | 11                | 11                |\n| Mean of y                   | 7.50              | 7.50              | 7.50              | 7.50              |\n| Sample variance of y        | 4.125             | 4.125             | 4.125             | 4.125             |\n| Correlation between x and y | 0.816             | 0.816             | 0.816             | 0.816             |\n| Linear regression line      | y = 3.00 + 0.500x | y = 3.00 + 0.500x | y = 3.00 + 0.500x | y = 3.00 + 0.500x |\n| Regression $R^2$            | 0.67              | 0.67              | 0.67              | 0.67              |\n\nLook at that! If we were to only compute common summary statistics, they all\nlook the same! (If you don't believe me, you can try it! They are all\nthe same up to rounding to the decimal places I've shown here.) However,\nif we plot the data, we see an incredible phenomenon.\n\n![](../../media/anscombe.png){width=\"60%\" fig-alt=\"Four scatterplots of the data shown above. Clockwise from the top left, the order is data set 1, 2, 4, 3. These are scatterplots of the y variables on the y axis and the x variables on the x axis. The trends are incredibly different from each plot, despite the similar summary statistics.\"}\n\nAll of the relationships look completely different! This dataset is called\n**Anscombe's quartet**, and you can read more (and see where I got this\nexample from) on [Wikipedia](https://en.wikipedia.org/wiki/Anscombe%27s_quartet).\nHopefully this should demonstrate to you why we can't just make tables of summary\nstatistics. **Making visualizations is essential for good data science!** If you\ndon't believe that after one example, take a look at the [Datasaurus Dozen](https://www.research.autodesk.com/publications/same-stats-different-graphs/) as well!\n\n\n# Further resources\n\n* [This post](https://datavizuniverse.substack.com/p/navigating-the-table-jungle) has examples of a lot of these table packages. Here is [another blog post](https://www.adrianbruegger.com/post/quick-descriptive-tables/) that also covers several table packages.\n* [This tutorial](https://gt.albert-rapp.de/) shows how to make nice tables with the `gt` package. \n* If you want to read a paper about making tables, I recommend Bartram L et al., *Untidy Data: The Unreasonable Effectiveness of Tables* (2021); [https://doi.org/10.1109/TVCG.2021.3114830](https://doi.org/10.1109/TVCG.2021.3114830). \n* The Epidemiologist R Handbook has a nice [section on tables](https://epirhandbook.com/en/descriptive-tables.html).\n* Tables are important in the pharma industry and for reports submitted to agencies like the FDA. The [Tables in Clinical Trials with R](https://rconsortium.github.io/rtrs-wg/) book has a lot of good information on that topic.\n",
    "supporting": [
      "tables-in-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}