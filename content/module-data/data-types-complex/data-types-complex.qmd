---
title: Complex types of data
subtitle: ""
---

# Overview

For this unit, we will discuss different types of data and how data type influences the analysis approach.


# Learning Objectives

- Be familiar with some common, complex data types
- Understand how the type and structure of data influences analysis approaches



# Introduction

Our focus is on the analysis of what is sometimes called _tabular_ or _rectangular_ data. We have observations (individual units of data) generally as rows, and variables (outcome and predictors) as columns.

Such data is still the most common type of data, especially in biomedical and life sciences. However, more complex types of data are rapidly increasing in frequency and importance. If the data has a different structure, it will usually require different, specialized analysis approaches. 

The good news is that most of the general concepts of data analysis and modeling apply to any type of data. The difference is often in the processing of the data, and the exact way data and models are combined. 

Doing analyses of such complex data is beyond the main scope of the course. Nevertheless, it is worth to briefly cover different important types of data. Note that some of these types are not mutually exclusive, for instance video data is always in some sense 


## Text

Working with and analyzing larger sections of text is becoming
increasingly important. Complex and powerful AI tools (e.g., ChatGPT)
have become rather good at working with text. The analysis of text often
goes by the term *natural language processing*. Such text analysis will
continue to increase in importance, given the increasing data streams of
that type. If you are interested in doing full analyses of text data,
the [`tidytext` R package](https://juliasilge.github.io/tidytext/) and
the [*Text mining with R* book](https://www.tidytextmining.com/) are
great resources. A short introduction to this topic is the [Text Mining
chapter (27) of
*IDS*](https://rafalab.github.io/dsbook/text-mining.html).

Of course, with the rise of text-based LLM AI tools and similar such offerings, this whole area of data analysis has grown very large on its own. If you want to really dig deep into this, check out some of the course and training offerings from [].



## Audio

Audio recordings can contain text/speech, or other sound. In the former case, models need to be applied to transform audio into text. After that, any text analysis tool can be used. If the audio does not contain text, one likely wants to apply other analyses. For instance one might want to detect if a certain sound is present, such as the sound of a fire alarm going off. This generally requires partitioning and transforming the audio into pieces that can be turned into some form of numeric variables and analyzed.

Audio also has a time-series structure that needs to be taken into account when analyzing it. 


## Images

For analysis purposes, one can think of an image is essentially a matrix of pixels, with each pixel having color and intensity values. This large amount of - usually very structured - data needs to be processed.

Images are generally converted into multiple matrices of values for
different pixels of an image. For instance, one could divide an image
into a 100x100 grid of pixels, and assign each pixel RGB (color) values
and intensity. That means one would have 4 matrices of numeric values,
each of size 100x100. One would then perform operations on those values.
As you can imagine, that quickly leads to fairly large amounts of data.
These days, most successful image analysis is done using some form of
**neural nets**, which are generally considered an **artificial
intelligence (AI)** method (but recall that ML and AI terminology is
somewhat fuzzy. The general current usage is that AI are a type of ML,
specifically the neural net type.)


## Video

Video is essentially a time-series of images with audio. As such, approaches that work for image and audio analysis can also be applied to video. Of course, the time-series nature of the images makes things more complicated. Neural-net/AI based methods are most often used.



## Genetics and -omics data

The main genetic type of data is based on sequences. A lot of
specialized tools exist to work with what is often fairly noisy data.
Aligning sequences, comparing them, placing them on phylogenetic trees,
and other such operations are so common and important that there is a
large area of tools for those purposes.

Data that is often called `-omics` (e.g., metabolomics, glycomics) is
often rectangular in structure, but often has distinguishing features,
such as few individuals/rows and **many** observations/columns. Such
data needs special treatment. Often, variable/feature reduction is a
common step in the analysis workflow.

The [bioconductor](https://www.bioconductor.org/) website is your source
for (almost) all tools and resources related to genetics and omics-type
data analyses in `R`.



## Big data

This isn't really a type of data in the same sense as the ones listed above. Still, it is its own type of data simply by the fact that it encompasses large amounts of data. Some of the complex data types above, e.g., videos, quickly become _big data_.

The term _big data_ is not well defined, but generally it means data that is too large to store/process/analyze on a single local computer. You therefore need specialized tools to process and analyze big data.

Generally, big data is stored somewhere in a database. [SQL type databases](https://en.wikipedia.org/wiki/SQL) are most common. You then want to access that database in a form that allows you to perform your analysis. There are different ways of dealing with big data. Most methods are general and apply independent of the programming language you use. [This article](https://rviews.rstudio.com/2019/07/17/3-big-data-strategies-for-r/) describes a few general approaches and explains how they can be implemented in R. [This webinar](https://rstudio.com/resources/webinars/working-with-big-data-in-r/) gives a bit more information and a nice description of the overall setup for big data. As you learn in that tutorial, R is often used together with other software to analyze big data. A tool that is often used for big data analysis is [Spark](http://spark.apache.org/). For R, there is the [sparklyr package](https://spark.rstudio.com/), which allows one to nicely interface with Spark.
 
In general, when you work with big data, you will have to carefully look at the data, the type of database it is stored, and the analysis goals. Based on that, you should use a stack of tools that allows analysis. The [Databases task view](https://cran.r-project.org/web/views/Databases.html) gives a good overview of different R packages for specific types of databases. You will use R for your analysis, and R will then interface with other software. This interface is usually fairly seamless. 

Big data is commonly modeled using complex models, such as machine-learning or AI algorithms. The reason for that is that those models are very powerful but need a lot of data. Thus, if you have big data, you can use them. That said, you can analyze big data with any model you want, including simple GLM or similar such models.




## Hierarchical data

This type of data is actually quite common. A hierarchy (also at times
called multi-level or nesting structure) occurs when there is some type
of grouping inherent. For instance, if you analyze heart attacks from
different hospitals, there might be systematic differences between
hospitals that are worth taking into account. You can then build models
that take that into account. I think there is a strong case to be made
that one should often start with a hierarchical modeling approach, and
only drop it if one is convinced that there are no systematic
differences in the data. Unfortunately, such hierarchical models are
still a little bit harder to implement, and often a lot harder to
understand and interpret. For such models, a Bayesian framework is often
very useful. A good introductory resource for hierarchical modeling, and
especially how to do it with `R`, is [*Statistical
Rethinking*](https://xcelab.net/rm/statistical-rethinking/) (the second
half of the book). The new edition of *R4DS* has a chapter on [working
with hierarchical data](https://r4ds.hadley.nz/rectangling.html) (but
does not cover the fitting/analysis part.) There is also a CRAN Task
view that lists [R packages relevant to hierarchical
modeling](https://cran.r-project.org/web/views/MixedModels.html).


## Longitudinal/Time-series data

Longitudinal or time series are a specialized data type that are autocorrelated, and we
can therefore get better predictions by using specialized models that
take this data structure into account. A good resource is the free
textbook [*Forecasting: Principles and
Practice*](https://otexts.com/fpp3/) and a lot of the other work by [Rob
Hyndman](https://robjhyndman.com/).

A very useful set of tools to allow times-series work in R is the set of
packages called the [`tidyverts`](https://tidyverts.org/). The
[`modeltime`](https://business-science.github.io/modeltime/) `R` package
allows one to use the `tidymodels` framework to analyze time-series
data.

CRAN also has a [Task View for *Time Series
Analysis*.](https://cran.r-project.org/web/views/TimeSeries.html) (A
*Task View* on CRAN is a site that tries to combine and summarize
various R packages for a specific topic). Another task view that deals
with longitudinal/time-series data is the [*Survival Analysis* Task
View](https://cran.r-project.org/web/views/Survival.html).


## Spatial data

Like time series data, spatial data also feature autocorrelation, but
typically in two dimensions. (i.e., latitude and longitude.)
Spatiotemporal data, typically collected as repeated measurements of
spatial data over time, is also somewhat common. One could also have an
elevation coordinate and have 3D (or even 4D spatiotemporal data)
spatial data, but most analyses focus on 2D spatial autocorrelation
structures.

While there is (to my knowledge) no current way to fit specific spatial
models in `tidymodels` (i.e. no `modeltime` analogue), one can use
spatial resampling through the
[`spatialsample`](https://spatialsample.tidymodels.org/) package, which
provides resampling methods that take spatial autocorrelation into
account.




<!-- ## Network data -->

<!-- At times, units of data you collect might be connected in a network.  -->


# Summary

The amount and variety of data available for analysis keeps increasing. As data get more complex, the analysis approaches become more specialized and often complex as well. While this requires additional learning of specialized tools, a lot of the fundamentals covered in this course still apply.



# Further Resources


* You can find a community-curated list of resources for spatial data in [*The Big Book of R*](https://www.bigbookofr.com/geospatial.html) or in
the [*Spatial Data* CRAN task view](https://cran.r-project.org/web/views/Spatial.html).

