---
title: Complex types of data
subtitle: ""
---

# Overview

For this unit, we will discuss different types of data and how data type influences the analysis approach.


# Learning Objectives

- Be familiar with some common, complex data types
- Understand how the type and structure of data influences analysis approaches



# Introduction

Our focus is on the analysis of what is sometimes called _tabular_ or _rectangular_ data. We have observations (individual units of data) generally as rows, and variables (outcome and predictors) as columns.

Such data is still the most common type of data, especially in biomedical and life sciences. However, more complex types of data are rapidly increasing in frequency and importance. If the data has a different structure, it will usually require different, specialized analysis approaches. 

The good news is that most of the general concepts of data analysis and modeling apply to any type of data. The difference is often in the processing of the data, and the exact way data and models are combined. 

Doing analyses of such complex data is beyond the scope of the course. Nevertheless, it is worth to briefly cover different types of data.



# Complex data types



## Text

Working with and analyzing larger sections of text is becoming
increasingly important. Complex and powerful AI tools (e.g., ChatGPT)
have become rather good at working with text. The analysis of text often
goes by the term *natural language processing*. Such text analysis will
continue to increase in importance, given the increasing data streams of
that type. If you are interested in doing full analyses of text data,
the [`tidytext` R package](https://juliasilge.github.io/tidytext/) and
the [*Text mining with R* book](https://www.tidytextmining.com/) are
great resources. A short introduction to this topic is the [Text Mining
chapter (27) of
*IDS*](https://rafalab.github.io/dsbook/text-mining.html).

Of course, with the rise of text-based LLM AI tools and similar such offerings, this whole area of data analysis has grown very large on its own. If you want to really dig deep into this, check out some of the course and training offerings from [].



## Audio

Audio recordings can contain text/speech, or other sound. In the former case, models need to be applied to transform audio into text. After that, any text analysis tool can be used. If the audio does not contain text, one likely wants to apply other analyses. For instance one might want to detect if a certain sound is present, such as the sound of a fire alarm going off. This generally requires partitioning and transforming the audio into pieces that can be turned into some form of numeric variables and analyzed.

Audio also has a time-series structure that needs to be taken into account when analyzing it. 


## Images

For analysis purposes, one can think of an image is essentially a matrix of pixels, with each pixel having color and intensity values. This large amount of - usually very structured - data needs to be processed.

Images are generally converted into multiple matrices of values for
different pixels of an image. For instance, one could divide an image
into a 100x100 grid of pixels, and assign each pixel RGB (color) values
and intensity. That means one would have 4 matrices of numeric values,
each of size 100x100. One would then perform operations on those values.
As you can imagine, that quickly leads to fairly large amounts of data.
These days, most successful image analysis is done using some form of
**neural nets**, which are generally considered an **artificial
intelligence (AI)** method (but recall that ML and AI terminology is
somewhat fuzzy. The general current usage is that AI are a type of ML,
specifically the neural net type.)


## Video

Video is essentially a time-series of images with audio. As such, approaches that work for image and audio analysis can also be applied to video. Of course, the time-series nature of the images makes things more complicated. Neural-net/AI based methods are most often used.



## Genetics and -omics data

The main genetic type of data is based on sequences. A lot of
specialized tools exist to work with what is often fairly noisy data.
Aligning sequences, comparing them, placing them on phylogenetic trees,
and other such operations are so common and important that there is a
large area of tools for those purposes.

Data that is often called `-omics` (e.g., metabolomics, glycomics) is
often rectangular in structure, but often has distinguishing features,
such as few individuals/rows and **many** observations/columns. Such
data needs special treatment. Often, variable/feature reduction is a
common step in the analysis workflow.

The [bioconductor](https://www.bioconductor.org/) website is your source
for (almost) all tools and resources related to genetics and omics-type
data analyses in `R`.



## Big data

This isn't really a type of data in the same sense as the ones listed above. Still, it is its own type of data simply by the fact that it encompasses large amounts of data. Some of the complex data types above, e.g., videos, quickly become _big data_.

The term _big data_ is not well defined, but generally it means data that is too large to store/process/analyze on a single local computer. You therefore need specialized tools to process and analyze big data.

Generally, big data is stored somewhere in a database. [SQL type databases](https://en.wikipedia.org/wiki/SQL) are most common. You then want to access that database in a form that allows you to perform your analysis. There are different ways of dealing with big data. Most methods are general and apply independent of the programming language you use. [This article](https://rviews.rstudio.com/2019/07/17/3-big-data-strategies-for-r/) describes a few general approaches and explains how they can be implemented in R. [This webinar](https://rstudio.com/resources/webinars/working-with-big-data-in-r/) gives a bit more information and a nice description of the overall setup for big data. As you learn in that tutorial, R is often used together with other software to analyze big data. A tool that is often used for big data analysis is [Spark](http://spark.apache.org/). For R, there is the [sparklyr package](https://spark.rstudio.com/), which allows one to nicely interface with Spark.
 
In general, when you work with big data, you will have to carefully look at the data, the type of database it is stored, and the analysis goals. Based on that, you should use a stack of tools that allows analysis. The [Databases task view](https://cran.r-project.org/web/views/Databases.html) gives a good overview of different R packages for specific types of databases. You will use R for your analysis, and R will then interface with other software. This interface is usually fairly seamless. 

Big data is commonly modeled using complex models, such as machine-learning or AI algorithms. The reason for that is that those models are very powerful but need a lot of data. Thus, if you have big data, you can use them. That said, you can analyze big data with any model you want, including simple GLM or similar such models.




